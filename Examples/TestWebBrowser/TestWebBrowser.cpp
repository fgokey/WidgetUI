// TestWebBrowser.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "TestWebBrowser.h"
#include "KeepAlive.h"
#include "Window.h"
#include "Manager.h"
#include "WindowDescription.h"
#include "WindowManager.h"
#include "Geometry.h"
#include "PushButton.h"
 #include "WebBrowser.h"
#include "ximage/ximage.h"
using namespace wui;

#define MAX_LOADSTRING 100

// 全局变量:
HINSTANCE hInst;								// 当前实例
TCHAR szTitle[MAX_LOADSTRING];					// 标题栏文本
TCHAR szWindowClass[MAX_LOADSTRING];			// 主窗口类名

Window* pWin;
Manager* pMgr;
WindowManager* pWinmgr;
TopLevelDescription* pDesc;
PushButton *pBtn;
wui::WebBrowser *pWeb;
CxImage imgBack;
CxImage imgBtn;



RECT rect,rcClient;
Rect rc;


// 此代码模块中包含的函数的前向声明:
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);
void OnRender(XGraphics &graphic, const Rect &rcDraw);

int APIENTRY _tWinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPTSTR    lpCmdLine,
                     int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

 	// TODO: 在此放置代码。
	MSG msg;
	HACCEL hAccelTable;

	// 初始化全局字符串
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_TESTWEBBROWSER, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// 执行应用程序初始化:
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_TESTWEBBROWSER));

	// 主消息循环:
	while (GetMessage(&msg, NULL, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			bool bTrans = false;
			if (pWeb)
			{
				bTrans = pWeb->OnTranslateAccelerator(msg);
				if (bTrans)
					OutputDebugString("dd");
			}	
			if (!bTrans)
				DispatchMessage(&msg);
			KeepAlive::Process();
		}
	}

	return (int) msg.wParam;
}



//
//  函数: MyRegisterClass()
//
//  目的: 注册窗口类。
//
//  注释:
//
//    仅当希望
//    此代码与添加到 Windows 95 中的“RegisterClassEx”
//    函数之前的 Win32 系统兼容时，才需要此函数及其用法。调用此函数十分重要，
//    这样应用程序就可以获得关联的
//    “格式正确的”小图标。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_TESTWEBBROWSER));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_TESTWEBBROWSER);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目的: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   HWND hWnd;

   hInst = hInstance; // 将实例句柄存储在全局变量中

   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的: 处理主窗口的消息。
//
//  WM_COMMAND	- 处理应用程序菜单
//  WM_PAINT	- 绘制主窗口
//  WM_DESTROY	- 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	PAINTSTRUCT ps;
	HDC hdc;

	switch (message)
	{
	case WM_CREATE:
		{
			::CoInitialize(NULL);

			pMgr = new Manager();
			pWinmgr = new WindowManager();
			pMgr->SetWindowManager(pWinmgr);
			GetClientRect(hWnd,	&rcClient);
			pDesc = new TopLevelDescription();
			pDesc->SetOwnerHandle(hWnd);
			pDesc->SetChildWindow(true);
			pDesc->SetPosition(Rect(rcClient.left+10, rcClient.top+ 10, rcClient.right-rcClient.left-20,rcClient.bottom-rcClient.top-20),true);
			pWin = new Window(pMgr, *pDesc);
			Rect rect = Rect(rcClient.left, rcClient.top, rcClient.right-rcClient.left,rcClient.bottom-rcClient.top);
			pWin->SetWindowGeometry(Rect(rcClient.left+10, rcClient.top+10, rcClient.right-rcClient.left-20,rcClient.bottom-rcClient.top-20));
			imgBack.LoadResource(FindResource(NULL,MAKEINTRESOURCE(IDB_BACK),_T("PNG")),CXIMAGE_FORMAT_PNG);
			pWin->sigRender().connect(&OnRender);
			pBtn = new PushButton(pWin);
			pBtn->SetText("ffdafdsaf");
			imgBtn.LoadResource(FindResource(NULL,MAKEINTRESOURCE(IDB_BTN),_T("PNG")),CXIMAGE_FORMAT_PNG);
			pBtn->SetBkImage(&imgBtn, PushButton::BTN_IMAGE_4STATE);
			pBtn->SetVisible();
			Rect rcBtn = pBtn->GetGeometry();
			rcBtn.Offset(100,0);
			pBtn->SetGeometry(rcBtn);
// 
 			pWeb = new wui::WebBrowser(pWin);
 			pWeb->SetGeometry(Rect(100,100,800,600));
 			pWeb->SetVisible();
 			pWeb->Navigate2("http://statics.qipai007.com/ad/226001.html?subsiteId=0");
 

			// 			pItemwindow = new ItemsDisplayWindow(pWin,rect);
		}
		break;	
	case WM_COMMAND:
		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
		// 分析菜单选择:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		// TODO: 在此添加任意绘图代码...
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		::CoUninitialize();
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}

void OnRender(XGraphics &graphic, const Rect &rcDraw)
{
	graphic.DrawImage(&imgBack,0,0,imgBack.GetWidth(),imgBack.GetHeight(),&rcDraw.GetRectStruct());
}